#!/bin/sh

dataset=""
id=""
filename=""
rotate_cnt=""

# Check num valid.
Check_num() {
	case $1 in
		[0-9]*)
		;;
		'')
		;;
		*)
			Error
		;;
	esac
}

# Check dataset valid.
Check_dataset() {
	for data in `zfs list | cut -d ' ' -f 1`; do
		if [ $1 = $data ] ; then
			return
		fi
	done
	Error
}

Func_list() {
	#id=$1
	#Check_num $id

	# If dataset doesn't exist, report error.
	if ! [ -z "$dataset" ] ; then
		Check_dataset $dataset
	fi

	printf "%-10s%-20s%s\n" "ID" "Dataset" "Time"
	if [ -z "$dataset" ] ; then dataset=".*"; fi
	zfs list -t snapshot | grep "^$dataset@" | \
		awk -F "@|_| " '{printf "%-10d%-20s%s %s\n", NR, $1, $2, $3}' | \
		sed -e 's/-/:/3' -e 's/-/:/3'
}

Func_delete() {
	local snap_name

	id=$1
	Check_num $id
	Check_dataset $dataset

	snap_name=`zfs list -t snapshot | grep "^$dataset@" | cut -d ' ' -f 1`
	if ! [ -z "$id" ] ; then
		snap_name=`echo $snap_name | awk -v i=$id -F ' ' '{print $i}'`
	fi
	for snap in $snap_name; do
		zfs destroy $snap
	done
}

Func_export() {
	local snap_name f_name

	id=$1
	Check_num $id
	Check_dataset $dataset
	if [ -z "$id" ] ; then id=1; fi	# id default to 1.

	snap_name=`zfs list -t snapshot | grep "^$dataset@" | cut -d ' ' -f 1 | awk -v i=$id '{if (NR==i) print $0}'`

	if ! [ -z "$snap_name" ] ; then
		f_name=`echo $snap_name | cut -d '_' -f 1 | tr / \\`
		zfs send ${snap_name} > ${f_name} && \
			xz ${f_name} && \
			openssl enc -aes-256-cbc -in ${f_name}.xz \
				-out ${f_name}.xz.enc
		rm ${f_name}.xz
	fi
}

Func_import() {
	local f_name timestamp

	filename=$1
	Check_dataset $dataset
	if [ -z "$filename" ] ; then Error; fi

	# Decreption.
	f_name=`echo $filename | awk -F '.' '{print $1"."$2}'`
	openssl enc -d -aes-256-cbc -in ${filename} -out ${f_name}
	
	# Decompression.
	unxz $f_name
	if [ $? -eq 1 ] ; then Error; fi	# File not exist.
	f_name=`echo $f_name | cut -d '.' -f 1`

	# Receive stream.
	# First, delete all snapshots in dataset.
	Func_delete
	timestamp=`date "+%Y-%m-%d_%H-%M-%S"`
	zfs receive -F ${dataset}@${timestamp} < ${f_name}
	rm $f_name
}

Func_create() {
	local snap_num timestamp snap_name

	rotate_cnt=$1
	Check_num $rotate_cnt
	Check_dataset $dataset
	if [ -z "$rotate_cnt" ] ; then rotate_cnt=20; fi
	if [ $rotate_cnt -eq 0 ] ; then exit 0; fi

	snap_num=`zfs list -t snapshot | grep $dataset | wc -l`
	if [ $snap_num -ge $rotate_cnt ] ; then 
		# Rotate snapshot.

		snap_name=`zfs list -t snapshot | grep $dataset | head -n $(($snap_num-$rotate_cnt+1)) | cut -d ' ' -f 1`
		for snap in $snap_name; do
			zfs destroy $snap
			if [ $? -eq 0 ] ; then
				echo "Rotate ${snap}" | \
					sed -e 's/-/:/3' -e 's/-/:/3' -e 's/_/ /g'
			fi
		done
	fi

	timestamp=`date "+%Y-%m-%d_%H-%M-%S"`
	zfs snapshot "${dataset}@${timestamp}"
	if [ $? -eq 0 ] ; then echo "Snap ${dataset}@`date`"; fi
}

Error() {
	echo "Error!!"
	exit 0
}

# Get commands.
dataset=$2
case $1 in
	--list)
		# if [ -z "$dataset" ] ; then Error; fi
		Func_list #$3
	;;

	--delete)
		if [ -z "$dataset" ] ; then Error; fi
		Func_delete $3
	;;

	--export)
		if [ -z "$dataset" ] ; then Error; fi
		Func_export $3
	;;

	--import)
		if [ -z "$dataset" ] ; then Error; fi
		Func_import $3
	;;

	'')
		Error
	;;

	*)
		dataset=$1
		if [ -z "$dataset" ] ;then Error; fi
		Func_create $2
	;;

esac

