#!/bin/sh

file_config="/usr/local/etc/zbackupd.yaml"
pid_file="/var/run/zbackup.pid"
be_daemon=""

#trap "Config_and_Start" SIGHUP
#trap "if [ -e ${pid_file} ]; then rm ${pid_file}; fi; exit 0" SIGTERM

Check_Dataset() {
	for data in `zfs list | cut -d ' ' -f 1`; do
		if [ ${1} = ${data} ] ; then
			return
		fi
	done
	Error "Dataset does not exist!!"
}

Check_Enable() {
	if [ "${1}" = "false" ] ; then
		return 1
	elif [ "${1}" = "true" ] || [ -z "${1}" ] ; then
		return 0
	else
		Error "Wrong enable value!!"
	fi
}

Check_Int() {
	local tmp

	tmp=`echo ${1} | sed -e "/^[0-9]+$/ p"`
	if [ -z "${tmp}" ] ; then
		Error "Wrong rotation value!!"
	fi
}

Check_Period() {
	local tmp

	tmp=`echo ${1} | sed -e "/^[0-9]+[smhdw]$/ p"`
	if [ -z "${tmp}" ] ; then
		Error "Wrong period value!!"
	fi
}

Get_Config_Value() {
	local retval

	retval=`sed -n "${1},$ p" ${2} | grep -m 1 ${3} | awk '{print $2}' | tr -d " '"`

	echo $retval
}

Start_CMD() {
	# $1: period
	# $2: backup command
	local sec min hour day cmd tmp

	# Deal with period.
	value=`echo $1 | awk -F "s|m|h|d|w" '{print $1}'`
	unit=`echo $1 | awk -F "${value}" '{print $2}'`
	Check_Int "${value}"

	cmd=$2
	case ${unit} in 
		s)
			$cmd
			# Fork child process.
			while true ; do
				sleep ${value}
				$cmd
			done &
			pid="${pid}$! "
		;;

		m)
			$cmd
			while true ; do
				sleep $((${value} * 60))
				$cmd
			done &
			pid="${pid}$! "
		;;

		h)
			$cmd
			while true ; do
				sleep $((${value} * 3600))
				$cmd
			done &
			pid="${pid}$! "
		;;

		d)
			$cmd
			while true ; do
				sleep $((${value} * 86400))
				$cmd
			done &
			pid="${pid}$! "
		;;

		w)
			$cmd
			while true ; do
				sleep $((${value} * 604800))
				$cmd
			done &
			pid="${pid}$! "
		;;

		*)
			Error "Unknown error in function write crontab!!"
		;;
	esac
}

Error() {
	echo "Error!! ${1}"
	exit 0
}

Config_and_Start() {
	pid=""
	# Parse configure file.
	for data_line in `cat ${file_config} | grep -n dataset | cut -d : -f 1` ; do
		# Get dataset name.
		dataset=`sed -n "${data_line} p" ${file_config} | awk '{print $3}' | tr -d " '"`
		Check_Dataset "${dataset}"
	
		# Get "enabled": true or false.
		enable="`Get_Config_Value ${data_line} ${file_config} 'enabled'`"
		if Check_Enable "${enable}" ; then
			# Get rotation.
			rotation="`Get_Config_Value ${data_line} ${file_config} 'rotation'`"
			Check_Int "${rotation}"
			backup_cmd="/usr/local/bin/zbackup ${dataset} ${rotation}"

			# Get period.
			period=`Get_Config_Value ${data_line} ${file_config} 'period'`
			Check_Period "${period}"
		
			Start_CMD "${period}" "${backup_cmd}"
		fi
	done

	# Wait for child processes.
	wait ${pid}
}

# Need root privilege.
if [ "`id -u`" -ne "0" ] ; then
	Error "Permission denied!!"
fi

# Get arguments from input.
while getopts ":dc:p:" op ; do 
	case ${op} in
		# Run zbackupd as daemon.
		d)
			be_daemon="yes"
		;;
		
		# Change configure file.
		c)
			file_config="${OPTARG}"
		;;
		
		# Change pid file.
		p)
			pid_file="${OPTARG}"
		;;

		*)
			Error "Wrong arguments!!"
		;;
	esac
done

trap "Config_and_Start" SIGHUP
trap "if [ -e ${pid_file} ]; then rm ${pid_file}; fi; exit 0" SIGTERM

# Check configure file exists or not.
if ! [ -e "${file_config}" ] ; then
	Error "Configure file does not exist!!"
fi

# Is daemon running now?
if [ -e "${pid_file}" ] ; then
	pid="`cat ${pid_file} | head -1`"
	if ! [ -z "`ps -o pid -axww | grep ${pid}`" ] ; then
		Error "Daemon is already running!!"
	fi
fi

if [ "${be_daemon}" = "yes" ] ; then
	/usr/local/bin/zbackupd -p ${pid_file} -c ${file_config} &
else
	# Create pid file.
	echo $$ > ${pid_file}
	Config_and_Start
fi

